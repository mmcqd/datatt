
import id
import unit
import void
import dec
import nat

def Contr (A : Type) : Type => (x : A) * (y : A) -> x = y

def Prop (A : Type) : Type => (x y : A) -> x = y

def Set (A : Type) : Type => (x y : A) -> Prop (x = y)

def Contr->Prop (A : Type) (p : Contr A) : Prop A =>
  \ x y => trans A x p.1 y (sym A p.1 x (p.2 x)) (p.2 y)

def Singl (A : Type) (x : A) : Type => (y : A) * (x = y)

def Contr-Singl (A : Type) (x : A) : Contr (Singl A x) => 
  ((x,refl),\ p => match p.2 with refl w => refl)


-- Contractibility of singletons gets us an uncurried version of alternative J
def H (A : Type) (x : A) (P : ((y : A) * (x = y)) -> Type) (p : (y : A) * (x = y)) : P (x,refl) -> P p => 
  match (Contr-Singl (A) x).2 p with
    | refl i => \ x => x

-- Alternative version of J where x is treated as a parameter instead of an index
def J' (A : Type) (x : A) (P : (y : A) -> x = y -> Type) (d : P x refl) (y : A) (p : x = y) : P y p =>
  H A x (\ p => P p.1 p.2) (y,p) d   


def Constant (A B : Type) (f : A -> B) : Type => (x y : A) -> f x = f y

def Collapsible (A : Type) : Type => (f : A -> A) * Constant A A f

def Id-Collapsible (A : Type) : Type => (x y : A) -> Collapsible (x = y)

def Set->Id-Collapsible (A : Type) (s : Set A) : Id-Collapsible A => \ x y =>
  (\ x => x,s x y)

-- Black Magic I stole from https://www.cs.bham.ac.uk/~mhe/GeneralizedHedberg/html/GeneralizedHedberg.html

def Id-Collapsible->Set (A : Type) (c : Id-Collapsible A) : Set A => \ x y p q => 
  let f (x y : A) : x = y -> x = y => (c (x) y).1 in
  let g (x y : A) : (p q : x = y) -> f x y p = f x y q => (c (x) y).2 in
  let claim0 (x y : A) (r : x = y) : r = trans A x x y (sym A x x (f x x refl)) (f x y r) => 
    match r with
      | refl x => sym-inverse A x x (f x x refl)
  in
  let claim1 : trans A x x y (sym A x x (f x x refl)) (f x y p) = trans A x x y (sym A x x (f x x refl)) (f x y q) =>
    cong (x = y) (x = y) (\ h => trans A x x y (sym A x x (f x x refl)) h) (f x y p) (f x y q) (g x y p q)
  in
  let w => trans (x = y) p (trans A x x y (sym A x x (f x x refl)) (f x y p)) (trans A x x y (sym A x x (f x x refl)) (f x y q)) (claim0 x y p) claim1 in
  trans (x = y) p (trans A x x y (sym A x x (f x x refl)) (f x y q)) q w (sym (x = y) q (trans A x x y (sym A x x (f x x refl)) (f x y q)) (claim0 x y q))


def Prop->Id-Collapsible (A : Type) (h : Prop A) : Id-Collapsible A => \ x y =>
  (\ _ => h x y,\ _ _ => refl)

def Prop->Set (A : Type) (h : Prop A) : Set A => Id-Collapsible->Set A (Prop->Id-Collapsible A h)

def Void-Collapsible : Collapsible Void => 
  (\ x => x, \elim)

def Inhabited->Collapsible (A : Type) (pt : A) : Collapsible A =>
  (\ _ => pt, \ _ _ => refl)

def Empty->Collapsible (A : Type) (e : A -> Void) : Collapsible A =>
  (\ x => x,\ x => elim e x with)


def Dec->Collapsible (A : Type) : Dec A -> Collapsible A => \elim
  | yes pt => Inhabited->Collapsible A pt
  | no ~pt => Empty->Collapsible A ~pt

def Dec-Id->Id-Collapsible (A : Type) (d : Dec-Id A) : Id-Collapsible A => \ x y => Dec->Collapsible (x = y) (d x y)


-- Hedberg's Theorem
def Dec-Id->Set (A : Type) (d : Dec-Id A) : Set A => Id-Collapsible->Set A (Dec-Id->Id-Collapsible A d)
def Hedberg => Dec-Id->Set

def Contr-Unit : Contr Unit => (<>,Unit-Eta)

def Prop-Unit : Prop Unit => \_ _ => refl

-- Direct proof that Unit is a Set
def Set-Unit' : Set Unit => \_ _ p q =>
  match p with
    | refl i => match q with
      | refl j => refl

def Set-Unit : Set Unit => Prop->Set Unit Prop-Unit

def Prop-Void : Prop Void => \elim

def Set-Void : Set Void => \elim


def HLevel : Nat -> Type -> Type => \elim
  | zero  => Contr
  | suc n => elim n with
    | zero => Prop
    | suc (_ / ih) => \ A => (x y : A) -> ih (x = y)


def HLevel-suc : (n : Nat) (A : Type) -> HLevel n A -> HLevel (suc n) A => \elim
  | zero => Contr->Prop
  | suc n => elim n with
    | zero => Prop->Set
    | suc (n' / ih) => \ A h a b => ih (a = b) (h a b)
