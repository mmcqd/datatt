
def Comm (A : Type) (op : A -> A -> A) : Type = (x y : A) -> op x y == op y x

def Assoc (A : Type) (op : A -> A -> A) : Type = (x y z : A) -> op (op x y) z == op x (op y z)

def Id-L (A : Type) (op : A -> A -> A) (z : A) : Type = (x : A) -> x == op z x

def Id-R (A : Type) (op : A -> A -> A) (z : A) : Type = (x : A) -> x == op x z


def Magma (C : Type) : Type = sig
  | op : C -> C -> C

def Semigroup (C : Type) : Type = sig extends Magma C
  | assoc : Assoc C op

def Monoid (M : Type) : Type = sig extends Semigroup M
  | z : M
  | id-l : Id-L M op z
  | id-r : Id-R M op z

