import fn
import bool

def ProdP (A B : Type) : Type => (b : Bool) -> split A B b
def pairP (A B : Type) (x : A) (y : B) : ProdP A B => \elim
  | tt => x
  | ff => y

def fstP (A B : Type) (p : ProdP A B) : A => p tt
def sndP (A B : Type) (p : ProdP A B) : B => p ff

def ProdP-Eta (A B : Type) (p : ProdP A B) : Id (ProdP A B) p (pairP A B (fstP A B p) (sndP A B p)) =>
  funextd Bool (split A B) p (pairP A B (fstP A B p) (sndP A B p)) (
    \elim tt => refl | ff => refl
  )

def SumS (A B : Type) : Type => (b : Bool) * split A B b
def inlS (A B : Type) (x : A) : SumS A B => (tt,x)
def inrS (A B : Type) (x : B) : SumS A B => (ff,x)
