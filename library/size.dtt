def Injection (A B : Type) (f : A -> B) : Type = (x y : A) -> Id B (f x) (f y) -> Id A x y

def Countable (A : Type) : Type = (f : A -> Nat) * Injection A Nat f

def Countable-Nat : Countable Nat =
  ( fn x => x
  , fn x y p => p
  )


def Finite (A : Type) : Type^1 = (n : Nat) * Iso A (Fin n)

def Finite-Bool : Finite Bool = (two , iso/Bool/Fin2)

def Finite-Maybe (A : Type) (f : Finite A) : Finite (Maybe A) =
  ( suc (f.1)
  , elim with none => inl <> | some x => inr (f.2.1 x)
  , elim with inl x => none | inr x => some (f.2.2.1 x)
  , elim with none => refl | some x => match f.2.2.2.1 x with refl i => refl
  , elim with inl x => (elim x with <> => refl) | inr x => match f.2.2.2.2 x with refl i => refl
  )