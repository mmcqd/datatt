import library/nat
import library/unit
import library/fin

def Vec (A : Type) : Nat -> Type = elim with
  | zero => Unit
  | suc (_ / ih) => A * ih

def vnil (A : Type) : Vec A zero = <>
def vcons (A : Type) (x : A) (n : Nat) (xs : Vec A n) : Vec A (suc n) = (x,xs)

def vhd (A : Type) (n : Nat) (v : Vec A (suc n)) : A = v.1
def vtl (A : Type) (n : Nat) (v : Vec A (suc n)) : Vec A n = v.2

def Vec-Ind (A : Type) (P : (n : Nat) -> Vec A n -> Type) (b : P zero <>) 
            (c : (m : Nat) (v : Vec A m) (x : A) -> P m v -> P (suc m) (x,v)) : (n : Nat) (v : Vec A n) -> P n v = elim with
  | zero => (elim with <> => b)
  | suc (n / ih) => fn v => c n v.2 v.1 (ih v.2) 

def vrec (A B : Type) (b : B) (c : A -> B -> B) : (n : Nat) -> Vec A n -> B = elim with
  | zero => fn _ => b
  | suc (n / ih) => fn v => c v.1 (ih v.2)


def vzip (A B : Type) : (n : Nat) -> Vec A n -> Vec B n -> Vec (A * B) n = elim with
  | zero => fn _ _ => <>
  | suc (_ / ih) => fn v1 v2 => ((v1.1,v2.1),ih v1.2 v2.2)

def !! (A : Type) : (n : Nat) -> Vec A n -> Fin n -> A = elim with
  | zero => fn _ => (elim with)
  | suc (n / ih) => fn v => elim with
    | inl x => v.1
    | inr m => ih v.2 m
