import nat
import list
import maybe
import sum

def QUEUE : Type^1 = sig
  | t : Type -> Type
  | emp : (A : Type) -> t A
  | enq : (A : Type) -> A -> t A -> t A
  | deq : (A : Type) -> t A -> Maybe (A * t A)

def Queue1 : QUEUE = struct
  | t = List
  | emp A = nil
  | enq A x q = cons x q
  | deq A q = elim rev A q with
    | nil => none
    | cons x q => some (x,q)

def Queue2 : QUEUE = struct
  | t A = (sig In : List A | Out : List A)
  | emp A = (struct In = nil | Out = nil)
  | enq A x q = (struct In = cons x q.In | Out = q.Out)
  | deq A q = elim q.Out with
    | cons x xs => some (x,struct In = q.In | Out = xs)
    | nil => let Out = rev A q.In in
      elim Out with
        | cons x xs => some (x,struct In = nil | Out = xs)
        | nil => none


def q : Queue2.t Nat = Queue2.enq Nat zero (Queue2.enq Nat one (Queue2.enq Nat two (Queue2.emp Nat)))

def Bisimilar (Q1 Q2 : QUEUE) (A : Type) : Type^1 = sig
  | R : Q1.t A -> Q2.t A -> Type
  | emp : R (Q1.emp A) (Q2.emp A)
  | enq : (q1 : Q1.t A) (q2 : Q2.t A) -> R q1 q2 -> (x : A) -> R (Q1.enq A x q1) (Q2.enq A x q2)
  | deq : (q1 : Q1.t A) (q2 : Q2.t A) -> R q1 q2 -> 
          Sum ((Q1.deq A q1 == none) * (Q2.deq A q2 == none)) ((x : A) (q1' : Q1.t A) (q2' : Q2.t A) * (Q1.deq A q1 == some (x,q1')) * (Q2.deq A q2 == some (x,q2')))

def Bisimilar-Queues (A : Type) : Bisimilar Queue1 Queue2 A = struct
  | R q1 q2 = q1 == ++ A q2.In (rev A q2.Out)
  | emp = refl
  | enq q1 q2 Rq1q2 x = match Rq1q2 with refl i => refl
  | deq = \elim
    | nil => \q2 r => (elim q2.In with
      | nil => (elim q2.Out with
        | nil => inl (refl,refl)
        | cons x (xs / ih) => ?
      )
      | cons x xs => ?
    )
    | cons x xs => \q2 => ?