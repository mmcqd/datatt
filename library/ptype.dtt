import library/id
import library/unit
import library/nat
import library/bool

def PType : Type^1 = sig
  | t  : Type
  | pt : t

def UnitP : PType = struct t = Unit | pt = <>
def BoolP : PType = struct t = Bool | pt = tt
def NatP : PType = struct t = Nat | pt = zero
def TypeP : PType^1 = struct t = Type | pt = Unit
def TypePN : PType^2 = struct t = Type^1 | pt = Type


def *-P (A B : PType) : PType = struct
  | t = A.t * B.t
  | pt = (A.pt,B.pt)

def Loop (P : PType) : PType = struct
  | t = P.pt == P.pt
  | pt = refl

def LoopN (n : Nat) (P : PType) : PType = elim n with
  | zero => P
  | suc (_ / ih) => Loop ih

def PType-not-Void (P : PType) : Not^1 (P.t == Void) = \ p =>
  coe P.t Void p P.pt

