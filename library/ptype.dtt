import id
import unit
import nat
import bool

def PType : Type^1 => sig 
  | t  : Type
  | pt : t

def UnitP : PType => struct t => Unit | pt => <>
def BoolP : PType => struct t => Bool | pt => tt
def NatP : PType => struct t => Nat | pt => zero
def TypeP : PType^1 => struct t => Type | pt => Unit
def TypePN : PType^2 => struct t => Type^1 | pt => Type


def *-P (A B : PType) : PType => struct
  | t => A.t * B.t
  | pt => (A.pt,B.pt)

def Loop (P : PType) : PType => struct
  | t => P.pt = P.pt
  | pt => refl

def LoopN (n : Nat) (P : PType) : PType => elim n with
  | zero => P
  | suc (_ / ih) => Loop ih

def PType-not-Void (P : PType) : Not^1 (P.t = Void) => \ p =>
  coe P.t Void p P.pt

def PPi (A : PType) (B : A.t -> PType) : Type => sig 
  | map : (x : A.t) -> (B (x)).t 
  | pt : map A.pt = (B (A.pt)).pt

def PMap (A B : PType) : Type => PPi A (\_ => B)
def PFun => PMap


def Pid (A : PType) : PMap A A => struct
  | map x => x
  | pt => refl

def Pcomp (A B C : PType) (f : PMap A B) (g : PMap B C) : PMap A C => struct
  | map x => g.map (f.map x)
  | pt => let p => cong B.t C.t g.map (f.map A.pt) B.pt f.pt in
    trans C.t (g.map (f.map A.pt)) (g.map B.pt) C.pt p g.pt

def Pconst (A B : PType) : PMap A B => struct
  | map _ => B.pt
  | pt => refl